/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DeliveryManRole;

import Business.Customer.Customer;
import Business.DeliveryMan.DeliveryMan;
import Business.EcoSystem;
import Business.Order.Order;
import Business.Restaurant.Restaurant;

import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class DeliveryManWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private DefaultTableModel model;
    private Customer customer;
    private Restaurant restaurantAssigned;
    private DefaultTableModel model1;
    
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public DeliveryManWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
      
        populateDeliveryManOrders();
        
//        populateTable();
    }
    
    public void populateTable(){
        DeliveryMan get = null;

        for(int i=0;i<business.getDeliveryManDirectory().getDeliverymanList().size();i++){
        if(business.getDeliveryManDirectory().getDeliverymanList().get(i).getName().equals(userAccount.getEmployee().getName())){
            get = business.getDeliveryManDirectory().getDeliverymanList().get(i);
        }
        }
        for(int i=0;i<get.getOrder().size();i++){
           
            model.addRow(new Object[]{
                get.getOrder().get(i).getOrderID(),
                get.getOrder().get(i).getCustomer().getCustomerName(),
                get.getOrder().get(i).getCustomer().getAddress(),
                get.getOrder().get(i).getCustomer().getContactNumber(),
                get.getOrder().get(i).getOrderstatus(),
                get.getOrder().get(i).getComment()
            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_delivermanOrders = new javax.swing.JTable();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        assignJButton.setBackground(new java.awt.Color(0, 0, 0));
        assignJButton.setForeground(new java.awt.Color(255, 255, 255));
        assignJButton.setText("Pickup Order");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 220, -1, -1));

        processJButton.setBackground(new java.awt.Color(0, 0, 0));
        processJButton.setForeground(new java.awt.Color(255, 255, 255));
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 220, 120, -1));

        jTable_delivermanOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_delivermanOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_delivermanOrdersMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable_delivermanOrders);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 610, 210));
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = jTable_delivermanOrders.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTable_delivermanOrders.getModel();
        
        
        ArrayList<Order> order = null;
        DeliveryMan get = null;
        for(int i=0;i<business.getDeliveryManDirectory().getDeliverymanList().size();i++){
        if(business.getDeliveryManDirectory().getDeliverymanList().get(i).getName().equals(userAccount.getEmployee().getName())){
            get = business.getDeliveryManDirectory().getDeliverymanList().get(i);
        }
        }
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Atleast one row should be selected");
            return;
        }else{
            String name = model.getValueAt(selectedRow, 0).toString();
            
            for(int i=0;i<get.getOrder().size();i++){
            if(get.getOrder().get(i).getOrderID().equals(name)){
                get.getOrder().get(i).setOrderstatus("Out for Delivery");
                order = get.getOrder().get(i).getCustomer().getOrder();
               

            }
        }
            for(int j=0;j<order.size();j++){
                if(order.get(j).getOrderID().equals(name)){
                    order.get(j).setOrderstatus("Out for Delivery");
                }
            }

        }
        
        populateDeliveryManOrders();
        
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        
//        int selectedRow = workRequestJTable.getSelectedRow();
//        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
int selectedRow = jTable_delivermanOrders.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTable_delivermanOrders.getModel();
        
        Order current = null;
        ArrayList<Order> order = null;
        DeliveryMan get = null;
        for(int i=0;i<business.getDeliveryManDirectory().getDeliverymanList().size();i++){
        if(business.getDeliveryManDirectory().getDeliverymanList().get(i).getName().equals(userAccount.getEmployee().getName())){
            get = business.getDeliveryManDirectory().getDeliverymanList().get(i);
        }
        }
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Atleast one row should be selected");
            return;
        }else{
            String name = model.getValueAt(selectedRow, 0).toString();
            for(int i=0;i<get.getOrder().size();i++){
            if(get.getOrder().get(i).getOrderID().equals(name)){
                current = get.getOrder().get(i);
                get.getOrder().get(i).setOrderstatus("Order Delivered");
                order = get.getOrder().get(i).getCustomer().getOrder();

            }
        }
            for(int j=0;j<order.size();j++){
                if(order.get(j).getOrderID().equals(name)){
                    order.get(j).setOrderstatus("Order Delivered");
                }
            }
        }
        populateDeliveryManOrders();

        
    }//GEN-LAST:event_processJButtonActionPerformed

    private void jTable_delivermanOrdersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_delivermanOrdersMouseClicked
        // TODO add your handling code here:
//        model = new DefaultTableModel();
//        
//        workRequestJTable.setModel(model);
//        model.addColumn("Order ID");
//        model.addColumn("Customer Name");
//        model.addColumn("Delivery Address");
//        model.addColumn("Customer Contact");
//        model.addColumn("Status");
//        model.addColumn("Comment");
//        int selectedRow = jTable_delivermanOrders.getSelectedRow();
//        DefaultTableModel model = (DefaultTableModel) jTable_delivermanOrders.getModel();
//        
//        model1.addRow(new Object[]{
//                model.getValueAt(selectedRow, 0).toString(),
//                model.getValueAt(selectedRow, 1).toString(),
//                model.getValueAt(selectedRow, 2).toString(),
//                model.getValueAt(selectedRow, 3).toString(),
//                model.getValueAt(selectedRow, 4).toString(),
//                model.getValueAt(selectedRow, 5).toString()
//            });
    }//GEN-LAST:event_jTable_delivermanOrdersMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable_delivermanOrders;
    private javax.swing.JButton processJButton;
    // End of variables declaration//GEN-END:variables

    private void populateDeliveryManOrders() {
        model1 = new DefaultTableModel();
        DeliveryMan get = null;
        jTable_delivermanOrders.setModel(model1);
        model1.addColumn("Order ID");
        model1.addColumn("Customer Name");
        model1.addColumn("Delivery Address");
        model1.addColumn("Customer Contact");
        model1.addColumn("Status");
        model1.addColumn("Comment");
        for(int i=0;i<business.getDeliveryManDirectory().getDeliverymanList().size();i++){
        if(business.getDeliveryManDirectory().getDeliverymanList().get(i).getName().equals(userAccount.getEmployee().getName())){
            get = business.getDeliveryManDirectory().getDeliverymanList().get(i);
        }
        }
        for(int i=0;i<get.getOrder().size();i++){
           
            model1.addRow(new Object[]{
                get.getOrder().get(i).getOrderID(),
                get.getOrder().get(i).getCustomer().getCustomerName(),
                get.getOrder().get(i).getCustomer().getAddress(),
                get.getOrder().get(i).getCustomer().getContactNumber(),
                get.getOrder().get(i).getOrderstatus(),
                get.getOrder().get(i).getComment()
            });
        }
        
    }


    
}
